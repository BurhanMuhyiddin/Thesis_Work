// Generated by gencpp from file process_rope_msgs/SampleRopeRequest.msg
// DO NOT EDIT!


#ifndef PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPEREQUEST_H
#define PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace process_rope_msgs
{
template <class ContainerAllocator>
struct SampleRopeRequest_
{
  typedef SampleRopeRequest_<ContainerAllocator> Type;

  SampleRopeRequest_()
    : type(0)
    , limb()
    , sample_target(false)  {
    }
  SampleRopeRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , limb(_alloc)
    , sample_target(false)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _limb_type;
  _limb_type limb;

   typedef uint8_t _sample_target_type;
  _sample_target_type sample_target;





  typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SampleRopeRequest_

typedef ::process_rope_msgs::SampleRopeRequest_<std::allocator<void> > SampleRopeRequest;

typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeRequest > SampleRopeRequestPtr;
typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeRequest const> SampleRopeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace process_rope_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/lar/ros/rope_ws/src/std_msgs/msg'], 'sensor_msgs': ['/home/lar/ros/rope_ws/src/common_msgs/sensor_msgs/msg'], 'geometry_msgs': ['/home/lar/ros/rope_ws/src/common_msgs/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6737aa1d947b6e368b9d7e4248b289d";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6737aa1d947b6e3ULL;
  static const uint64_t static_value2 = 0x68b9d7e4248b289dULL;
};

template<class ContainerAllocator>
struct DataType< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "process_rope_msgs/SampleRopeRequest";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "char type\n\
string limb\n\
bool sample_target\n\
";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.limb);
      stream.next(m.sample_target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SampleRopeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::process_rope_msgs::SampleRopeRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "limb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.limb);
    s << indent << "sample_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sample_target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPEREQUEST_H
