// Generated by gencpp from file process_rope_msgs/SampleRopeResponse.msg
// DO NOT EDIT!


#ifndef PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPERESPONSE_H
#define PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace process_rope_msgs
{
template <class ContainerAllocator>
struct SampleRopeResponse_
{
  typedef SampleRopeResponse_<ContainerAllocator> Type;

  SampleRopeResponse_()
    : sampled_target_points()
    , sampled_current_points()
    , pick_points()
    , pick_img_points()
    , place_points()
    , place_img_points()
    , h_limb()
    , success(false)  {
    }
  SampleRopeResponse_(const ContainerAllocator& _alloc)
    : sampled_target_points(_alloc)
    , sampled_current_points(_alloc)
    , pick_points(_alloc)
    , pick_img_points(_alloc)
    , place_points(_alloc)
    , place_img_points(_alloc)
    , h_limb(_alloc)
    , success(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _sampled_target_points_type;
  _sampled_target_points_type sampled_target_points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _sampled_current_points_type;
  _sampled_current_points_type sampled_current_points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pick_points_type;
  _pick_points_type pick_points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pick_img_points_type;
  _pick_img_points_type pick_img_points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _place_points_type;
  _place_points_type place_points;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _place_img_points_type;
  _place_img_points_type place_img_points;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _h_limb_type;
  _h_limb_type h_limb;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SampleRopeResponse_

typedef ::process_rope_msgs::SampleRopeResponse_<std::allocator<void> > SampleRopeResponse;

typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeResponse > SampleRopeResponsePtr;
typedef boost::shared_ptr< ::process_rope_msgs::SampleRopeResponse const> SampleRopeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace process_rope_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/lar/ros/rope_ws/src/std_msgs/msg'], 'sensor_msgs': ['/home/lar/ros/rope_ws/src/common_msgs/sensor_msgs/msg'], 'geometry_msgs': ['/home/lar/ros/rope_ws/src/common_msgs/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b8cb66134ce8dee054ccfb99a3a7f22";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b8cb66134ce8deeULL;
  static const uint64_t static_value2 = 0x054ccfb99a3a7f22ULL;
};

template<class ContainerAllocator>
struct DataType< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "process_rope_msgs/SampleRopeResponse";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] sampled_target_points\n\
float64[] sampled_current_points\n\
float64[] pick_points\n\
float64[] pick_img_points\n\
float64[] place_points\n\
float64[] place_img_points\n\
string h_limb\n\
bool success\n\
\n\
";
  }

  static const char* value(const ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sampled_target_points);
      stream.next(m.sampled_current_points);
      stream.next(m.pick_points);
      stream.next(m.pick_img_points);
      stream.next(m.place_points);
      stream.next(m.place_img_points);
      stream.next(m.h_limb);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SampleRopeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::process_rope_msgs::SampleRopeResponse_<ContainerAllocator>& v)
  {
    s << indent << "sampled_target_points[]" << std::endl;
    for (size_t i = 0; i < v.sampled_target_points.size(); ++i)
    {
      s << indent << "  sampled_target_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sampled_target_points[i]);
    }
    s << indent << "sampled_current_points[]" << std::endl;
    for (size_t i = 0; i < v.sampled_current_points.size(); ++i)
    {
      s << indent << "  sampled_current_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sampled_current_points[i]);
    }
    s << indent << "pick_points[]" << std::endl;
    for (size_t i = 0; i < v.pick_points.size(); ++i)
    {
      s << indent << "  pick_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pick_points[i]);
    }
    s << indent << "pick_img_points[]" << std::endl;
    for (size_t i = 0; i < v.pick_img_points.size(); ++i)
    {
      s << indent << "  pick_img_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pick_img_points[i]);
    }
    s << indent << "place_points[]" << std::endl;
    for (size_t i = 0; i < v.place_points.size(); ++i)
    {
      s << indent << "  place_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.place_points[i]);
    }
    s << indent << "place_img_points[]" << std::endl;
    for (size_t i = 0; i < v.place_img_points.size(); ++i)
    {
      s << indent << "  place_img_points[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.place_img_points[i]);
    }
    s << indent << "h_limb: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.h_limb);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROCESS_ROPE_MSGS_MESSAGE_SAMPLEROPERESPONSE_H
